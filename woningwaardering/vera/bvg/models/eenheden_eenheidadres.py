# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from woningwaardering.vera.bvg.models.eenheden_buurt import EenhedenBuurt
from woningwaardering.vera.bvg.models.eenheden_gemeente import EenhedenGemeente
from woningwaardering.vera.bvg.models.eenheden_geometrie import EenhedenGeometrie
from woningwaardering.vera.bvg.models.eenheden_wijk import EenhedenWijk
from woningwaardering.vera.bvg.models.eenheden_woonplaats import EenhedenWoonplaats
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata
from typing import Set
from typing_extensions import Self


class EenhedenEenheidadres(BaseModel):
    """
    EenhedenEenheidadres
    """  # noqa: E501

    id: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.",
    )
    id_extern: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.",
        alias="idExtern",
    )
    id_gegevensbeheerder: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.",
        alias="idGegevensbeheerder",
    )
    id_organisatie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.",
        alias="idOrganisatie",
    )
    id_administratie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.",
        alias="idAdministratie",
    )
    code: Optional[StrictStr] = Field(
        default=None,
        description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)",
    )
    soort: Optional[Referentiedata] = Field(
        default=None,
        description="Het soort adres. Bijv. eenheidadres, postadres of buitenlands adres. Referentiedatasoort ADRESSOORT.",
    )
    adres: Optional[StrictStr] = Field(
        default=None,
        description="De samenstelling van de attributen: straatnaam, huisnummer, huisletter en huisnummerToevoeging.",
    )
    huisletter: Optional[StrictStr] = Field(
        default=None,
        description="De huisletter door of namens het gemeentebestuur ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.",
    )
    huisnummer: Optional[StrictStr] = Field(
        default=None,
        description="Het huisnummer dat door of namens het gemeentebestuur ten aanzien van een adresseerbaar object toegekende nummering.",
    )
    huisnummer_toevoeging: Optional[StrictStr] = Field(
        default=None,
        description="De huisnummer toevoeging van het adres.",
        alias="huisnummerToevoeging",
    )
    postcode: Optional[StrictStr] = Field(
        default=None, description="De postcode van het adres."
    )
    straatnaam: Optional[StrictStr] = Field(
        default=None, description="De straatnaam behorend bij het adres."
    )
    buurt: Optional[EenhedenBuurt] = Field(
        default=None, description="De buurt behorend bij het adres."
    )
    gemeente: Optional[EenhedenGemeente] = Field(
        default=None, description="De gemeente behorend bij het adres."
    )
    geometrie: Optional[EenhedenGeometrie] = Field(
        default=None, description="De geometrie van het adres."
    )
    land: Optional[Referentiedata] = Field(
        default=None,
        description="Het land waarin het adres zich bevindt. Referentiedatasoort LAND.",
    )
    wijk: Optional[EenhedenWijk] = Field(
        default=None, description="De wijk behorend bij het adres."
    )
    woonplaats: Optional[EenhedenWoonplaats] = Field(
        default=None, description="De woonplaats waarin het adres zich bevindt."
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "idExtern",
        "idGegevensbeheerder",
        "idOrganisatie",
        "idAdministratie",
        "code",
        "soort",
        "adres",
        "huisletter",
        "huisnummer",
        "huisnummerToevoeging",
        "postcode",
        "straatnaam",
        "buurt",
        "gemeente",
        "geometrie",
        "land",
        "wijk",
        "woonplaats",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EenhedenEenheidadres from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict["soort"] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buurt
        if self.buurt:
            _dict["buurt"] = self.buurt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gemeente
        if self.gemeente:
            _dict["gemeente"] = self.gemeente.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict["geometrie"] = self.geometrie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of land
        if self.land:
            _dict["land"] = self.land.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wijk
        if self.wijk:
            _dict["wijk"] = self.wijk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of woonplaats
        if self.woonplaats:
            _dict["woonplaats"] = self.woonplaats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EenhedenEenheidadres from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "idExtern": obj.get("idExtern"),
                "idGegevensbeheerder": obj.get("idGegevensbeheerder"),
                "idOrganisatie": obj.get("idOrganisatie"),
                "idAdministratie": obj.get("idAdministratie"),
                "code": obj.get("code"),
                "soort": Referentiedata.from_dict(obj["soort"])
                if obj.get("soort") is not None
                else None,
                "adres": obj.get("adres"),
                "huisletter": obj.get("huisletter"),
                "huisnummer": obj.get("huisnummer"),
                "huisnummerToevoeging": obj.get("huisnummerToevoeging"),
                "postcode": obj.get("postcode"),
                "straatnaam": obj.get("straatnaam"),
                "buurt": EenhedenBuurt.from_dict(obj["buurt"])
                if obj.get("buurt") is not None
                else None,
                "gemeente": EenhedenGemeente.from_dict(obj["gemeente"])
                if obj.get("gemeente") is not None
                else None,
                "geometrie": EenhedenGeometrie.from_dict(obj["geometrie"])
                if obj.get("geometrie") is not None
                else None,
                "land": Referentiedata.from_dict(obj["land"])
                if obj.get("land") is not None
                else None,
                "wijk": EenhedenWijk.from_dict(obj["wijk"])
                if obj.get("wijk") is not None
                else None,
                "woonplaats": EenhedenWoonplaats.from_dict(obj["woonplaats"])
                if obj.get("woonplaats") is not None
                else None,
            }
        )
        return _obj
