# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from woningwaardering.vera.bvg.models.eenheden_relatierol import EenhedenRelatierol
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata
from woningwaardering.vera.bvg.models.relatie_sleutels import RelatieSleutels
from typing import Set
from typing_extensions import Self


class EenhedenRechtspersoon(BaseModel):
    """
    EenhedenRechtspersoon
    """  # noqa: E501

    id: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.",
    )
    id_extern: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.",
        alias="idExtern",
    )
    id_gegevensbeheerder: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.",
        alias="idGegevensbeheerder",
    )
    id_organisatie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.",
        alias="idOrganisatie",
    )
    id_administratie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.",
        alias="idAdministratie",
    )
    code: Optional[StrictStr] = Field(
        default=None,
        description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)",
    )
    soort: Optional[Referentiedata] = Field(
        default=None,
        description="Het soort relatie: NatuurlijkPersoon, Relatiegroep of Rechtspersoon. Referentiedatasoort RELATIESOORT.",
    )
    detail_soort: Optional[Referentiedata] = Field(
        default=None,
        description="Het detail van soort relatie: Bijvoorbeeld Huishouden bij een relatiegroep, of de standaard bedrijfsindeling volgens SBI bij een rechtspersoon. Referentiedatasoort RELATIEDETAILSOORT.",
        alias="detailSoort",
    )
    relaties: Optional[List[RelatieSleutels]] = Field(
        default=None,
        description="De gerelateerde relaties. Bijv. contactpersonen, huishoudleden etc.",
    )
    rollen: Optional[List[EenhedenRelatierol]] = Field(
        default=None,
        description="De rollen behorend bij de relatie. Bijvoorbeeld: Prospect, bewoner.",
    )
    kvk_nummer: Optional[StrictStr] = Field(
        default=None,
        description="Het KVK nummer van de rechtspersoon.",
        alias="kvkNummer",
    )
    globaal_locatienummer: Optional[StrictStr] = Field(
        default=None,
        description="Een wereldwijd nummer ter identificatie van een partij of locatie. Het dertiencijferige nummer (GLN) wordt uitgegeven door GS1.",
        alias="globaalLocatienummer",
    )
    naam: Optional[StrictStr] = Field(
        default=None, description="De naam de rechtspersoon."
    )
    btw_nummer: Optional[StrictStr] = Field(
        default=None,
        description="Het BTW nummer van de rechtspersoon.",
        alias="btwNummer",
    )
    organisatievorm: Optional[Referentiedata] = Field(
        default=None,
        description="De organisatievorm van de rechtspersoon. Bijvoorbeeld: BV, NV, stichting of vereniging. Ook wel rechtsvorm genoemd. Referentiedatasoort ORGANISATIEVORM.",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "idExtern",
        "idGegevensbeheerder",
        "idOrganisatie",
        "idAdministratie",
        "code",
        "soort",
        "detailSoort",
        "relaties",
        "rollen",
        "kvkNummer",
        "globaalLocatienummer",
        "naam",
        "btwNummer",
        "organisatievorm",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EenhedenRechtspersoon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict["soort"] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detail_soort
        if self.detail_soort:
            _dict["detailSoort"] = self.detail_soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in relaties (list)
        _relaties_items = []
        if self.relaties:
            for _relaties_item in self.relaties:
                if _relaties_item:
                    _relaties_items.append(_relaties_item.to_dict())
            _dict["relaties"] = _relaties_items
        # override the default output from pydantic by calling `to_dict()` of each item in rollen (list)
        _rollen_items = []
        if self.rollen:
            for _rollen_item in self.rollen:
                if _rollen_item:
                    _rollen_items.append(_rollen_item.to_dict())
            _dict["rollen"] = _rollen_items
        # override the default output from pydantic by calling `to_dict()` of organisatievorm
        if self.organisatievorm:
            _dict["organisatievorm"] = self.organisatievorm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EenhedenRechtspersoon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "idExtern": obj.get("idExtern"),
                "idGegevensbeheerder": obj.get("idGegevensbeheerder"),
                "idOrganisatie": obj.get("idOrganisatie"),
                "idAdministratie": obj.get("idAdministratie"),
                "code": obj.get("code"),
                "soort": Referentiedata.from_dict(obj["soort"])
                if obj.get("soort") is not None
                else None,
                "detailSoort": Referentiedata.from_dict(obj["detailSoort"])
                if obj.get("detailSoort") is not None
                else None,
                "relaties": [
                    RelatieSleutels.from_dict(_item) for _item in obj["relaties"]
                ]
                if obj.get("relaties") is not None
                else None,
                "rollen": [
                    EenhedenRelatierol.from_dict(_item) for _item in obj["rollen"]
                ]
                if obj.get("rollen") is not None
                else None,
                "kvkNummer": obj.get("kvkNummer"),
                "globaalLocatienummer": obj.get("globaalLocatienummer"),
                "naam": obj.get("naam"),
                "btwNummer": obj.get("btwNummer"),
                "organisatievorm": Referentiedata.from_dict(obj["organisatievorm"])
                if obj.get("organisatievorm") is not None
                else None,
            }
        )
        return _obj
