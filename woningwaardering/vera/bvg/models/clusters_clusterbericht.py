# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from woningwaardering.vera.bvg.models.cluster_sleutels import ClusterSleutels
from woningwaardering.vera.bvg.models.clusters_eenheid import ClustersEenheid
from woningwaardering.vera.bvg.models.clusters_geometrie import ClustersGeometrie
from woningwaardering.vera.bvg.models.clusters_relatie import ClustersRelatie
from woningwaardering.vera.bvg.models.collectief_object_sleutels import (
    CollectiefObjectSleutels,
)
from woningwaardering.vera.bvg.models.conditiemeting_sleutels import (
    ConditiemetingSleutels,
)
from woningwaardering.vera.bvg.models.extra_attribuut import ExtraAttribuut
from woningwaardering.vera.bvg.models.garantie_sleutels import GarantieSleutels
from woningwaardering.vera.bvg.models.informatieobject import Informatieobject
from woningwaardering.vera.bvg.models.overeenkomst_sleutels import OvereenkomstSleutels
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata
from woningwaardering.vera.bvg.models.sturingslabel import Sturingslabel
from typing import Set
from typing_extensions import Self


class ClustersClusterbericht(BaseModel):
    """
    ClustersClusterbericht
    """  # noqa: E501

    id: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.",
    )
    id_extern: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.",
        alias="idExtern",
    )
    id_gegevensbeheerder: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.",
        alias="idGegevensbeheerder",
    )
    id_organisatie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.",
        alias="idOrganisatie",
    )
    id_administratie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.",
        alias="idAdministratie",
    )
    code: Optional[StrictStr] = Field(
        default=None,
        description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)",
    )
    soort: Optional[Referentiedata] = Field(
        default=None,
        description="Het soort cluster. Bijvoorbeeld, nieuwbouwcluster, onderhoudscluster, financieel cluster. Referentiedatasoort CLUSTERSOORT.",
    )
    naam: Optional[StrictStr] = Field(
        default=None, description="De naam van de cluster."
    )
    omschrijving: Optional[StrictStr] = Field(
        default=None, description="De omschrijving van de cluster."
    )
    bovenliggende_cluster: Optional[ClusterSleutels] = Field(
        default=None,
        description="Het bovenliggende / overkoepelende cluster waar dit cluster eventueel onderdeel van is.",
        alias="bovenliggendeCluster",
    )
    begindatum: Optional[date] = Field(
        default=None, description="De begindatum van de cluster."
    )
    einddatum: Optional[date] = Field(
        default=None, description="De einddatum van de cluster."
    )
    collectieve_objecten: Optional[List[CollectiefObjectSleutels]] = Field(
        default=None,
        description="De collectieve objecten behorend bij de cluster.",
        alias="collectieveObjecten",
    )
    conditiemeting: Optional[ConditiemetingSleutels] = Field(
        default=None,
        description="Aan een cluster kunnen meerdere conditiescores conform de NEN 2767 gekoppeld worden (per tijdvak).",
    )
    eenheden: Optional[List[ClustersEenheid]] = Field(
        default=None, description="De eenheden behorend bij de cluster."
    )
    garanties: Optional[List[GarantieSleutels]] = Field(
        default=None, description="De garanties behorend bij de cluster."
    )
    geometrie: Optional[ClustersGeometrie] = Field(
        default=None, description="De geometrie van de cluster."
    )
    overeenkomsten: Optional[List[OvereenkomstSleutels]] = Field(
        default=None,
        description="De onderhoudsovereenkomsten die voor het cluster gelden.",
    )
    relaties: Optional[List[ClustersRelatie]] = Field(
        default=None,
        description="De relaties die een speciale rol spelen voor het cluster bijvoorbeeld een Vereniging van eigenaren, een onderhoudsbedrijf, projectleider etc.",
    )
    extra_attributen: Optional[List[ExtraAttribuut]] = Field(
        default=None,
        description="Mogelijkheid om het bericht uit te breiden met attributen die nog niet in het logisch datamodel beschikbaar zijn",
        alias="extra-attributen",
    )
    informatieobjecten: Optional[List[Informatieobject]] = Field(
        default=None,
        description="Mogelijkheid om het bericht uit te breiden met documentatie. De beschrijving kan de inhoud van een notitie of memo zijn",
    )
    sturingslabels: Optional[List[Sturingslabel]] = Field(
        default=None,
        description="Mogelijkheid om het bericht uit te breiden met sturingslabels",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "idExtern",
        "idGegevensbeheerder",
        "idOrganisatie",
        "idAdministratie",
        "code",
        "soort",
        "naam",
        "omschrijving",
        "bovenliggendeCluster",
        "begindatum",
        "einddatum",
        "collectieveObjecten",
        "conditiemeting",
        "eenheden",
        "garanties",
        "geometrie",
        "overeenkomsten",
        "relaties",
        "extra-attributen",
        "informatieobjecten",
        "sturingslabels",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClustersClusterbericht from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict["soort"] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bovenliggende_cluster
        if self.bovenliggende_cluster:
            _dict["bovenliggendeCluster"] = self.bovenliggende_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in collectieve_objecten (list)
        _collectieve_objecten_items = []
        if self.collectieve_objecten:
            for _collectieve_objecten_item in self.collectieve_objecten:
                if _collectieve_objecten_item:
                    _collectieve_objecten_items.append(
                        _collectieve_objecten_item.to_dict()
                    )
            _dict["collectieveObjecten"] = _collectieve_objecten_items
        # override the default output from pydantic by calling `to_dict()` of conditiemeting
        if self.conditiemeting:
            _dict["conditiemeting"] = self.conditiemeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in eenheden (list)
        _eenheden_items = []
        if self.eenheden:
            for _eenheden_item in self.eenheden:
                if _eenheden_item:
                    _eenheden_items.append(_eenheden_item.to_dict())
            _dict["eenheden"] = _eenheden_items
        # override the default output from pydantic by calling `to_dict()` of each item in garanties (list)
        _garanties_items = []
        if self.garanties:
            for _garanties_item in self.garanties:
                if _garanties_item:
                    _garanties_items.append(_garanties_item.to_dict())
            _dict["garanties"] = _garanties_items
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict["geometrie"] = self.geometrie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in overeenkomsten (list)
        _overeenkomsten_items = []
        if self.overeenkomsten:
            for _overeenkomsten_item in self.overeenkomsten:
                if _overeenkomsten_item:
                    _overeenkomsten_items.append(_overeenkomsten_item.to_dict())
            _dict["overeenkomsten"] = _overeenkomsten_items
        # override the default output from pydantic by calling `to_dict()` of each item in relaties (list)
        _relaties_items = []
        if self.relaties:
            for _relaties_item in self.relaties:
                if _relaties_item:
                    _relaties_items.append(_relaties_item.to_dict())
            _dict["relaties"] = _relaties_items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_attributen (list)
        _extra_attributen_items = []
        if self.extra_attributen:
            for _extra_attributen_item in self.extra_attributen:
                if _extra_attributen_item:
                    _extra_attributen_items.append(_extra_attributen_item.to_dict())
            _dict["extra-attributen"] = _extra_attributen_items
        # override the default output from pydantic by calling `to_dict()` of each item in informatieobjecten (list)
        _informatieobjecten_items = []
        if self.informatieobjecten:
            for _informatieobjecten_item in self.informatieobjecten:
                if _informatieobjecten_item:
                    _informatieobjecten_items.append(_informatieobjecten_item.to_dict())
            _dict["informatieobjecten"] = _informatieobjecten_items
        # override the default output from pydantic by calling `to_dict()` of each item in sturingslabels (list)
        _sturingslabels_items = []
        if self.sturingslabels:
            for _sturingslabels_item in self.sturingslabels:
                if _sturingslabels_item:
                    _sturingslabels_items.append(_sturingslabels_item.to_dict())
            _dict["sturingslabels"] = _sturingslabels_items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClustersClusterbericht from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "idExtern": obj.get("idExtern"),
                "idGegevensbeheerder": obj.get("idGegevensbeheerder"),
                "idOrganisatie": obj.get("idOrganisatie"),
                "idAdministratie": obj.get("idAdministratie"),
                "code": obj.get("code"),
                "soort": Referentiedata.from_dict(obj["soort"])
                if obj.get("soort") is not None
                else None,
                "naam": obj.get("naam"),
                "omschrijving": obj.get("omschrijving"),
                "bovenliggendeCluster": ClusterSleutels.from_dict(
                    obj["bovenliggendeCluster"]
                )
                if obj.get("bovenliggendeCluster") is not None
                else None,
                "begindatum": obj.get("begindatum"),
                "einddatum": obj.get("einddatum"),
                "collectieveObjecten": [
                    CollectiefObjectSleutels.from_dict(_item)
                    for _item in obj["collectieveObjecten"]
                ]
                if obj.get("collectieveObjecten") is not None
                else None,
                "conditiemeting": ConditiemetingSleutels.from_dict(
                    obj["conditiemeting"]
                )
                if obj.get("conditiemeting") is not None
                else None,
                "eenheden": [
                    ClustersEenheid.from_dict(_item) for _item in obj["eenheden"]
                ]
                if obj.get("eenheden") is not None
                else None,
                "garanties": [
                    GarantieSleutels.from_dict(_item) for _item in obj["garanties"]
                ]
                if obj.get("garanties") is not None
                else None,
                "geometrie": ClustersGeometrie.from_dict(obj["geometrie"])
                if obj.get("geometrie") is not None
                else None,
                "overeenkomsten": [
                    OvereenkomstSleutels.from_dict(_item)
                    for _item in obj["overeenkomsten"]
                ]
                if obj.get("overeenkomsten") is not None
                else None,
                "relaties": [
                    ClustersRelatie.from_dict(_item) for _item in obj["relaties"]
                ]
                if obj.get("relaties") is not None
                else None,
                "extra-attributen": [
                    ExtraAttribuut.from_dict(_item) for _item in obj["extra-attributen"]
                ]
                if obj.get("extra-attributen") is not None
                else None,
                "informatieobjecten": [
                    Informatieobject.from_dict(_item)
                    for _item in obj["informatieobjecten"]
                ]
                if obj.get("informatieobjecten") is not None
                else None,
                "sturingslabels": [
                    Sturingslabel.from_dict(_item) for _item in obj["sturingslabels"]
                ]
                if obj.get("sturingslabels") is not None
                else None,
            }
        )
        return _obj
