# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from woningwaardering.vera.bvg.models.cluster_sleutels import ClusterSleutels
from woningwaardering.vera.bvg.models.clusters_eenheid import ClustersEenheid
from woningwaardering.vera.bvg.models.clusters_geometrie import ClustersGeometrie
from woningwaardering.vera.bvg.models.clusters_relatie import ClustersRelatie
from woningwaardering.vera.bvg.models.collectief_object_sleutels import CollectiefObjectSleutels
from woningwaardering.vera.bvg.models.conditiemeting_sleutels import ConditiemetingSleutels
from woningwaardering.vera.bvg.models.extra_attribuut import ExtraAttribuut
from woningwaardering.vera.bvg.models.garantie_sleutels import GarantieSleutels
from woningwaardering.vera.bvg.models.informatieobject import Informatieobject
from woningwaardering.vera.bvg.models.overeenkomst_sleutels import OvereenkomstSleutels
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata
from woningwaardering.vera.bvg.models.sturingslabel import Sturingslabel

class ClustersClusterbericht(BaseModel):
    """
    ClustersClusterbericht
    """
    id: Optional[StrictStr] = Field(None, description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.")
    id_extern: Optional[StrictStr] = Field(None, alias="idExtern", description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.")
    id_gegevensbeheerder: Optional[StrictStr] = Field(None, alias="idGegevensbeheerder", description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.")
    id_organisatie: Optional[StrictStr] = Field(None, alias="idOrganisatie", description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.")
    id_administratie: Optional[StrictStr] = Field(None, alias="idAdministratie", description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.")
    code: Optional[StrictStr] = Field(None, description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)")
    soort: Optional[Referentiedata] = Field(None, description="Het soort cluster. Bijvoorbeeld, nieuwbouwcluster, onderhoudscluster, financieel cluster. Referentiedatasoort CLUSTERSOORT.")
    naam: Optional[StrictStr] = Field(None, description="De naam van de cluster.")
    omschrijving: Optional[StrictStr] = Field(None, description="De omschrijving van de cluster.")
    bovenliggende_cluster: Optional[ClusterSleutels] = Field(None, alias="bovenliggendeCluster", description="Het bovenliggende / overkoepelende cluster waar dit cluster eventueel onderdeel van is.")
    begindatum: Optional[date] = Field(None, description="De begindatum van de cluster.")
    einddatum: Optional[date] = Field(None, description="De einddatum van de cluster.")
    collectieve_objecten: Optional[conlist(CollectiefObjectSleutels)] = Field(None, alias="collectieveObjecten", description="De collectieve objecten behorend bij de cluster.")
    conditiemeting: Optional[ConditiemetingSleutels] = Field(None, description="Aan een cluster kunnen meerdere conditiescores conform de NEN 2767 gekoppeld worden (per tijdvak).")
    eenheden: Optional[conlist(ClustersEenheid)] = Field(None, description="De eenheden behorend bij de cluster.")
    garanties: Optional[conlist(GarantieSleutels)] = Field(None, description="De garanties behorend bij de cluster.")
    geometrie: Optional[ClustersGeometrie] = Field(None, description="De geometrie van de cluster.")
    overeenkomsten: Optional[conlist(OvereenkomstSleutels)] = Field(None, description="De onderhoudsovereenkomsten die voor het cluster gelden.")
    relaties: Optional[conlist(ClustersRelatie)] = Field(None, description="De relaties die een speciale rol spelen voor het cluster bijvoorbeeld een Vereniging van eigenaren, een onderhoudsbedrijf, projectleider etc.")
    extra_attributen: Optional[conlist(ExtraAttribuut)] = Field(None, alias="extra-attributen", description="Mogelijkheid om het bericht uit te breiden met attributen die nog niet in het logisch datamodel beschikbaar zijn")
    informatieobjecten: Optional[conlist(Informatieobject)] = Field(None, description="Mogelijkheid om het bericht uit te breiden met documentatie. De beschrijving kan de inhoud van een notitie of memo zijn")
    sturingslabels: Optional[conlist(Sturingslabel)] = Field(None, description="Mogelijkheid om het bericht uit te breiden met sturingslabels")
    __properties = ["id", "idExtern", "idGegevensbeheerder", "idOrganisatie", "idAdministratie", "code", "soort", "naam", "omschrijving", "bovenliggendeCluster", "begindatum", "einddatum", "collectieveObjecten", "conditiemeting", "eenheden", "garanties", "geometrie", "overeenkomsten", "relaties", "extra-attributen", "informatieobjecten", "sturingslabels"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClustersClusterbericht:
        """Create an instance of ClustersClusterbericht from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict['soort'] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bovenliggende_cluster
        if self.bovenliggende_cluster:
            _dict['bovenliggendeCluster'] = self.bovenliggende_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in collectieve_objecten (list)
        _items = []
        if self.collectieve_objecten:
            for _item in self.collectieve_objecten:
                if _item:
                    _items.append(_item.to_dict())
            _dict['collectieveObjecten'] = _items
        # override the default output from pydantic by calling `to_dict()` of conditiemeting
        if self.conditiemeting:
            _dict['conditiemeting'] = self.conditiemeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in eenheden (list)
        _items = []
        if self.eenheden:
            for _item in self.eenheden:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eenheden'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in garanties (list)
        _items = []
        if self.garanties:
            for _item in self.garanties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['garanties'] = _items
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict['geometrie'] = self.geometrie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in overeenkomsten (list)
        _items = []
        if self.overeenkomsten:
            for _item in self.overeenkomsten:
                if _item:
                    _items.append(_item.to_dict())
            _dict['overeenkomsten'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relaties (list)
        _items = []
        if self.relaties:
            for _item in self.relaties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relaties'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_attributen (list)
        _items = []
        if self.extra_attributen:
            for _item in self.extra_attributen:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extra-attributen'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in informatieobjecten (list)
        _items = []
        if self.informatieobjecten:
            for _item in self.informatieobjecten:
                if _item:
                    _items.append(_item.to_dict())
            _dict['informatieobjecten'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sturingslabels (list)
        _items = []
        if self.sturingslabels:
            for _item in self.sturingslabels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sturingslabels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClustersClusterbericht:
        """Create an instance of ClustersClusterbericht from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClustersClusterbericht.parse_obj(obj)

        _obj = ClustersClusterbericht.parse_obj({
            "id": obj.get("id"),
            "id_extern": obj.get("idExtern"),
            "id_gegevensbeheerder": obj.get("idGegevensbeheerder"),
            "id_organisatie": obj.get("idOrganisatie"),
            "id_administratie": obj.get("idAdministratie"),
            "code": obj.get("code"),
            "soort": Referentiedata.from_dict(obj.get("soort")) if obj.get("soort") is not None else None,
            "naam": obj.get("naam"),
            "omschrijving": obj.get("omschrijving"),
            "bovenliggende_cluster": ClusterSleutels.from_dict(obj.get("bovenliggendeCluster")) if obj.get("bovenliggendeCluster") is not None else None,
            "begindatum": obj.get("begindatum"),
            "einddatum": obj.get("einddatum"),
            "collectieve_objecten": [CollectiefObjectSleutels.from_dict(_item) for _item in obj.get("collectieveObjecten")] if obj.get("collectieveObjecten") is not None else None,
            "conditiemeting": ConditiemetingSleutels.from_dict(obj.get("conditiemeting")) if obj.get("conditiemeting") is not None else None,
            "eenheden": [ClustersEenheid.from_dict(_item) for _item in obj.get("eenheden")] if obj.get("eenheden") is not None else None,
            "garanties": [GarantieSleutels.from_dict(_item) for _item in obj.get("garanties")] if obj.get("garanties") is not None else None,
            "geometrie": ClustersGeometrie.from_dict(obj.get("geometrie")) if obj.get("geometrie") is not None else None,
            "overeenkomsten": [OvereenkomstSleutels.from_dict(_item) for _item in obj.get("overeenkomsten")] if obj.get("overeenkomsten") is not None else None,
            "relaties": [ClustersRelatie.from_dict(_item) for _item in obj.get("relaties")] if obj.get("relaties") is not None else None,
            "extra_attributen": [ExtraAttribuut.from_dict(_item) for _item in obj.get("extra-attributen")] if obj.get("extra-attributen") is not None else None,
            "informatieobjecten": [Informatieobject.from_dict(_item) for _item in obj.get("informatieobjecten")] if obj.get("informatieobjecten") is not None else None,
            "sturingslabels": [Sturingslabel.from_dict(_item) for _item in obj.get("sturingslabels")] if obj.get("sturingslabels") is not None else None
        })
        return _obj


