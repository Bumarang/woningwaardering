# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from woningwaardering.vera.bvg.models.collectief_object_sleutels import (
    CollectiefObjectSleutels,
)
from woningwaardering.vera.bvg.models.eenheden_adres import EenhedenAdres
from woningwaardering.vera.bvg.models.eenheden_adresseerbaar_object_basisregistratie import (
    EenhedenAdresseerbaarObjectBasisregistratie,
)
from woningwaardering.vera.bvg.models.eenheden_beleidswaarde import (
    EenhedenBeleidswaarde,
)
from woningwaardering.vera.bvg.models.eenheden_cluster import EenhedenCluster
from woningwaardering.vera.bvg.models.eenheden_eenheidcriterium import (
    EenhedenEenheidcriterium,
)
from woningwaardering.vera.bvg.models.eenheden_energieprestatie import (
    EenhedenEnergieprestatie,
)
from woningwaardering.vera.bvg.models.eenheden_pand import EenhedenPand
from woningwaardering.vera.bvg.models.eenheden_prijscomponent import (
    EenhedenPrijscomponent,
)
from woningwaardering.vera.bvg.models.eenheden_relatie import EenhedenRelatie
from woningwaardering.vera.bvg.models.eenheden_ruimte import EenhedenRuimte
from woningwaardering.vera.bvg.models.eenheden_woz_eenheid import EenhedenWozEenheid
from woningwaardering.vera.bvg.models.eenheid_sleutels import EenheidSleutels
from woningwaardering.vera.bvg.models.extra_attribuut import ExtraAttribuut
from woningwaardering.vera.bvg.models.informatieobject import Informatieobject
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata
from woningwaardering.vera.bvg.models.sturingslabel import Sturingslabel
from typing import Set
from typing_extensions import Self


class EenhedenEenheidbericht(BaseModel):
    """
    EenhedenEenheidbericht
    """  # noqa: E501

    id: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.",
    )
    id_extern: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.",
        alias="idExtern",
    )
    id_gegevensbeheerder: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.",
        alias="idGegevensbeheerder",
    )
    id_organisatie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.",
        alias="idOrganisatie",
    )
    id_administratie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.",
        alias="idAdministratie",
    )
    code: Optional[StrictStr] = Field(
        default=None,
        description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)",
    )
    soort: Optional[Referentiedata] = Field(
        default=None,
        description="De dienstverlening (soort) die geboden kan worden met de eenheid. Voorbeeld: Woonruimte, Bedrijfsruimte, Parkeergelegenheid. Referentiedatasoort EENHEIDSOORT.",
    )
    detail_soort: Optional[Referentiedata] = Field(
        default=None,
        description="Het type van de eenheid. Bijvoorbeeld: Hoekwoning, Tussenwoning, Flat, Maisonnette. Hiervoor wordt de lijst van de waarderingskamer als uitgangspunt genomen. Referentiedatasoort EENHEIDDETAILSOORT.",
        alias="detailSoort",
    )
    naam: Optional[StrictStr] = Field(
        default=None, description="De naam van de eenheid."
    )
    omschrijving: Optional[StrictStr] = Field(
        default=None, description="De omschrijving van de eenheid."
    )
    bouwnummer: Optional[StrictStr] = Field(
        default=None,
        description="Het bouwnummer behorende bij de eenheid. Dit wordt aan een eenheid toegekend bij nieuwbouw van de eenheid. Vaak is op dat moment het adres van de eenheid nog niet bepaald.",
    )
    status: Optional[Referentiedata] = Field(
        default=None,
        description="De status van de eenheid, bijvoorbeeld: Leegstand, Uit beheer, Renovatie, Verhuurd, Verkocht Referentiedatasoort EENHEIDSTATUS.",
    )
    detail_status: Optional[Referentiedata] = Field(
        default=None,
        description="De detailstatus (ook wel substatus) van een status. De detailstatus geeft een extra reden op van de eenheid status die de eenheid heeft. Bijvoorbeeld: de status is Renovatie, de detailstatus geeft aan dat het om planmatig onderhoud gaat. Referentiedatasoort EENHEIDDETAILSTATUS.",
        alias="detailStatus",
    )
    begin_bouwdatum: Optional[date] = Field(
        default=None,
        description="De begindatum van de bouw van de eenheid.",
        alias="beginBouwdatum",
    )
    bouwjaar: Optional[StrictInt] = Field(
        default=None,
        description="Het bouwjaar waarin de bouw van de woning is afgerond.",
    )
    opleverdatum: Optional[date] = Field(
        default=None,
        description="De opleverdatum van de eenheid. De bouw van de eenheid is dan gereed of de eenheid is beschikbaar voor een volgende gebruiker.",
    )
    in_exploitatiedatum: Optional[date] = Field(
        default=None,
        description="De datum waarop de eenheid in exploitatie is gegaan. We spreken over exploitatie als de eenheid in beheer is met als doel dat er resultaat wordt behaald.",
        alias="inExploitatiedatum",
    )
    uit_exploitatiedatum: Optional[date] = Field(
        default=None,
        description="De datum waarop de eenheid uit exploitatie is gegaan, zowel het beheer als andere activiteiten stoppen.",
        alias="uitExploitatiedatum",
    )
    aantal_onzelfstandige_eenheden: Optional[StrictInt] = Field(
        default=None,
        description="Het aantal onzelfstandige eenheden (units, kamers) dat binnen de als geheel verhuurde eenheid valt. Bedoeld om het aantal onzelfstandige eenheden te kunnen verantwoorden in (verplichte) rapportages zoals dVi. Het attribuut wordt gebruikt als slechts één eenheid (met één huurovereenkomst) in het administratieve systeem is vastgelegd, in plaats van de (door VERA geadviseerde) registratie van alle eenheden met een bovenliggendeEenheid.",
        alias="aantalOnzelfstandigeEenheden",
    )
    aanvullende_doelgroep: Optional[Referentiedata] = Field(
        default=None,
        description="De aanvullende doelgroep waarvoor de woning het meest geschikt is en waarvoor meestal ook voorrang wordt verleend. Bijv. Ouderen, Geestelijk gehandicapten, Lichamelijk gehandicapten, GGZ-Patiënten etc. Eventueel te gebruiken in combinatie met doelgroep. Referentiedatasoort AANVULLENDEDOELGROEP.",
        alias="aanvullendeDoelgroep",
    )
    adres: Optional[EenhedenAdres] = Field(
        default=None, description="Het adres van de eenheid."
    )
    adresseerbaar_object_basisregistratie: Optional[
        EenhedenAdresseerbaarObjectBasisregistratie
    ] = Field(
        default=None,
        description="Het adresseerbare object uit de BAG die overeenkomt met de eenheid.",
        alias="adresseerbaarObjectBasisregistratie",
    )
    beleidswaarde: Optional[List[EenhedenBeleidswaarde]] = Field(
        default=None,
        description="De beleidswaarden behorende bij de eenheid. Vanaf versie 4.0 wordt dit attribuut in meervoud geschreven",
    )
    beoogd_uit_exploitatie_datum: Optional[date] = Field(
        default=None,
        description="Verwachte datum waarop de eenheid aan het bezit zal worden onttrokken door sloop of verkoop.",
        alias="beoogdUitExploitatieDatum",
    )
    bestemming: Optional[Referentiedata] = Field(
        default=None,
        description="Door de corporatie bepaalde bestemming van de eenheid bij mutatie (sloop, verkoop, huur). In AddresseerbaarObjectRegistratie wordt met het attribuut gebruiksdoel aangegeven wat volgens de gemeente het gebruiksdoel van de eenheid is (wonen, werken, zorg, enz.) Referentiedatasoort BESTEMMING.",
    )
    bovenliggende_eenheid: Optional[EenheidSleutels] = Field(
        default=None,
        description="De bovenliggende eenheid waarvan de eenheid onderdeel van uit maakt.",
        alias="bovenliggendeEenheid",
    )
    brutohuur: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="De brutohuur in euro's die geregistreerd staat bij de eenheid. De brutohuur is de netto huur (of kale huur) inclusief alle huurcomponenten en inclusief BTW.",
    )
    clusters: Optional[List[EenhedenCluster]] = Field(
        default=None, description="De clusters waar de eenheid onderdeel van uitmaakt."
    )
    collectieve_objecten: Optional[List[CollectiefObjectSleutels]] = Field(
        default=None,
        description="De collectieve objecten behorend bij de eenheid.",
        alias="collectieveObjecten",
    )
    criteria: Optional[List[EenhedenEenheidcriterium]] = Field(
        default=None,
        description="De voorwaarden waaraan de bewoner moet voldoen om in aanmerking te komen of voorrang te krijgen voor de eenheid.",
        alias="Criteria",
    )
    doelgroep: Optional[Referentiedata] = Field(
        default=None,
        description="De doelgroep waarvoor de eenheid bestemd is, bijv. zorgwoning, jongerenwoning, seniorenwoning, eengezinswoning, starterswoning etc. Eventueel te gebruiken in combinatie met aanvullendeDoelgroep. Referentiedatasoort DOELGROEP.",
    )
    energieprestaties: Optional[List[EenhedenEnergieprestatie]] = Field(
        default=None, description="De huidige energieprestatie(s) van de eenheid."
    )
    energievoorzieningen: Optional[List[Referentiedata]] = Field(
        default=None,
        description="Voorzieningen met betrekking tot energie zoals zonnepanelen en oplaadpunten Referentiedatasoort EENHEIDENERGIEVOORZIENING.",
    )
    etage: Optional[StrictInt] = Field(
        default=None, description="De etage waarop de eenheid zich bevindt."
    )
    gebruiksoppervlakte: Optional[StrictInt] = Field(
        default=None,
        description="De gebruiksoppervlakte van een eenheid(verblijfsobject) in gehele vierkante meters, gemeten conform NEN 2580. Te gebruiken voor verantwoording dVi. Naast gebruiksoppervlakte is ook een attribuut totaleOppervlakte beschikbaar.",
    )
    in_exploitatie_reden: Optional[Referentiedata] = Field(
        default=None,
        description="De reden voor het in exploitatie nemen van een eenheid. Bijvoorbeeld: verhuur of beheer namens andere eigenaren. Referentiedatasoort INEXPLOITATIEREDEN.",
        alias="inExploitatieReden",
    )
    interieur: Optional[List[Referentiedata]] = Field(
        default=None,
        description="Binnenruimte van de woning zoals gemeubileerd en vloerbedekking in de woonkamer. Referentiedatasoort EENHEIDINTERIEUR.",
    )
    isolatie: Optional[List[Referentiedata]] = Field(
        default=None,
        description="Getroffen isolatie maatregelen in de eenheid. Referentiedatasoort EENHEIDISOLATIE.",
    )
    juridisch_eigendomspercentage: Optional[StrictInt] = Field(
        default=None,
        description="Het percentage juridisch eigendom zoals vastgelegd in de eigendomsakte.",
        alias="juridischEigendomspercentage",
    )
    kadastraal_nummer: Optional[StrictStr] = Field(
        default=None,
        description="Het kadastraalnummer behorend bij de eenheid.",
        alias="kadastraalNummer",
    )
    kamers_aantal: Optional[StrictInt] = Field(
        default=None,
        description="Het aantal leefruimten en slaapkamers behorende bij de eenheid.",
        alias="kamersAantal",
    )
    klimaatbeheersing: Optional[List[Referentiedata]] = Field(
        default=None,
        description="Verzameling van kenmerken die het binnenklimaat (lucht, warmte en koeling) regelen in de eenheid. Referentiedatasoort EENHEIDKLIMAATBEHEERSING.",
    )
    kwaliteitsniveau: Optional[Referentiedata] = Field(
        default=None,
        description="Het kwaliteitsniveau van de eenheid. Referentiedatasoort KWALITEITSNIVEAU.",
    )
    ligging: Optional[List[Referentiedata]] = Field(
        default=None,
        description="De omschrijving van de situering van de eenheid behorend bij de eenheid. Bijvoorbeeld: Ligt aan drukke weg en vrij uitzicht Referentiedatasoort EENHEIDLIGGING.",
    )
    maatschappelijk_label: Optional[Referentiedata] = Field(
        default=None,
        description="Het label waarmee het maatschappelijk en economisch belang van de dienstverlening wordt aangegeven: behoort de eenheid tot de DAEB-tak of tot de niet-DAEB-tak. Het label op de eenheid kan afwijken van het maatschappelijk label van de huurovereenkomst. Hiermee kan worden aangegeven dat een eenheid die behoort tot de niet-DAEB tak als DAEB-verhuring verantwoord moet worden. Referentiedatasoort MAATSCHAPPELIJKLABEL.",
        alias="maatschappelijkLabel",
    )
    monumenten: Optional[List[Referentiedata]] = Field(
        default=None,
        description="De aanduiding die aangeeft of de eenheid een monument is, en ook welke soort monument het is. Bijvoorbeeld rijksmonument, beschermd stadsgezicht etc. Een eenheid kan onder meerdere typen monumenten vallen. Referentiedatasoort EENHEIDMONUMENT.",
    )
    onderhoudslabel: Optional[Referentiedata] = Field(
        default=None,
        description="Het onderhoudslabel geeft aan hoe hoog of laag het onderhoudsniveau van het betreffende eenheid moet zijn. Hierbij wordt rekening gehouden met het soort bewoners en de toekomst van het pand. Referentiedatasoort ONDERHOUDSLABEL.",
    )
    panden: Optional[List[EenhedenPand]] = Field(
        default=None, description="De panden behorend bij een eenheid."
    )
    prijscomponenten: Optional[List[EenhedenPrijscomponent]] = Field(
        default=None,
        description="De prijscomponenten behorend bij de eenheid. Bijvoorbeel huurcomponenten of maandelijkse lasten.",
    )
    rayon: Optional[Referentiedata] = Field(
        default=None,
        description="Het rayon waar de eenheid in valt. Waarden zijn corporatiespecifiek en daarom niet in de referentiedata beschreven. Referentiedatasoort RAYON.",
    )
    rekenhuur: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="De subsidiabele huur in euro's die geregistreerd staat bij de eenheid. De subsidiabele huur is het bedrag van de huur dat in aanmerking komt voor huurtoeslag.",
    )
    relaties: Optional[List[EenhedenRelatie]] = Field(
        default=None,
        description="Bij.v de eigenaar, beheerder en contactpersonen die gekoppeld zijn aan de eenheid. Met de koppeling naar Relatierol kan de soort rol van de relatie ten opzichte van de eenheid vastgelegd worden.",
    )
    ruimten: Optional[List[EenhedenRuimte]] = Field(
        default=None,
        description="De verschillende ruimtes behorend bij de eenheid Bij. 'Achtertuin' of 'Woonkamer'.",
    )
    sanitair: Optional[List[Referentiedata]] = Field(
        default=None,
        description="Sanitaire voorzieningen Referentiedatasoort EENHEIDSANITAIR.",
    )
    streefhuur: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="De netto huur in euro's waarnaar de woningcorporatie streeft.",
    )
    toegankelijkheidslabel: Optional[Referentiedata] = Field(
        default=None,
        description="Het toegankelijkheidslabel van de eenheid. Bijvoorbeeld, de eenheid is geschikt voor minder validen. Referentiedatasoort TOEGANKELIJKHEIDSLABEL.",
    )
    totaal_inhoud: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="De totale inhoud van de eenheid in m3. Zowel bewoonbare als onbewoonbare vertrekken worden hierbij meegeteld.",
        alias="totaalInhoud",
    )
    totale_oppervlakte: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description='De totale oppervlakte van een eenheid. Vertrekken die niet bewoonbaar zijn, worden hierbij meegeteld. Let op: niet te verwarren met de voor de dVi vereiste "gebruiksoppervlakte".',
        alias="totaleOppervlakte",
    )
    uit_exploitatie_reden: Optional[Referentiedata] = Field(
        default=None,
        description="De reden voor het uit exploitatie nemen van een eenheid. Voorbeeld: sloop. Referentiedatasoort UITEXPLOITATIEREDEN.",
        alias="uitExploitatieReden",
    )
    verkoop: Optional[StrictBool] = Field(
        default=None,
        description="De waarde die aangeeft of de eenheid beschikbaar is voor de verkoop.",
    )
    vertrekken_aantal: Optional[StrictInt] = Field(
        default=None,
        description="Het aantal vertrekken behorende bij de eenheid.",
        alias="vertrekkenAantal",
    )
    verwarmde_vertrekken_aantal: Optional[StrictInt] = Field(
        default=None,
        description="Het aantal verwarmde vertrekken van de eenheid.",
        alias="verwarmdeVertrekkenAantal",
    )
    vestiging: Optional[Referentiedata] = Field(
        default=None,
        description="De vestiging van de vastgoedaanbieder die de woning heeft aangeboden. Referentiedatasoort VESTIGING.",
    )
    volgnummer: Optional[StrictStr] = Field(
        default=None,
        description="Het volgnummer van een eenheid, zoals een appartementsaanduiding, of een nummering van garageboxen.",
    )
    vraagprijs: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="De vraagprijs voor de verkoop van de eenheid."
    )
    woningwaarderingstelsel: Optional[Referentiedata] = Field(
        default=None,
        description="Het woningwaardering stelsel geeft aan welk puntensysteem voor de eenheid van toepassing is: het puntensysteem voor zelfstandige woonruimten, het puntensysteem voor onzelfstandige woonruimten, of het puntensysteem voor woonwagens en standplaatsen. Referentiedatasoort WONINGWAARDERINGSTELSEL.",
        alias="Woningwaarderingstelsel",
    )
    woonvorm: Optional[Referentiedata] = Field(
        default=None,
        description="De woonvorm van de eenheid. Bijvoorbeeld groepswonen. Referentiedatasoort WOONVORM.",
    )
    woz_eenheden: Optional[List[EenhedenWozEenheid]] = Field(
        default=None,
        description="De WOZ eenheden behorend bij de eenheid. Dit zijn de WOZ waarden behorende bij de eenheid.",
        alias="wozEenheden",
    )
    zelfstandig: Optional[StrictBool] = Field(
        default=None,
        description="Geeft aan of het een zelfstandige of onzelfstandige eenheid betreft. Dit gegeven wordt ook gebruikt bij het bepalen van het woningwaardering volgens het woningwaarderingsstelsel.",
    )
    zorgfaciliteit_omschrijving: Optional[StrictStr] = Field(
        default=None,
        description="De omschrijving van de zorgfaciliteit behorende bij de eenheid.",
        alias="zorgfaciliteitOmschrijving",
    )
    extra_attributen: Optional[List[ExtraAttribuut]] = Field(
        default=None,
        description="Mogelijkheid om het bericht uit te breiden met attributen die nog niet in het logisch datamodel beschikbaar zijn",
        alias="extra-attributen",
    )
    informatieobjecten: Optional[List[Informatieobject]] = Field(
        default=None,
        description="Mogelijkheid om het bericht uit te breiden met documentatie. De beschrijving kan de inhoud van een notitie of memo zijn",
    )
    sturingslabels: Optional[List[Sturingslabel]] = Field(
        default=None,
        description="Mogelijkheid om het bericht uit te breiden met sturingslabels",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "idExtern",
        "idGegevensbeheerder",
        "idOrganisatie",
        "idAdministratie",
        "code",
        "soort",
        "detailSoort",
        "naam",
        "omschrijving",
        "bouwnummer",
        "status",
        "detailStatus",
        "beginBouwdatum",
        "bouwjaar",
        "opleverdatum",
        "inExploitatiedatum",
        "uitExploitatiedatum",
        "aantalOnzelfstandigeEenheden",
        "aanvullendeDoelgroep",
        "adres",
        "adresseerbaarObjectBasisregistratie",
        "beleidswaarde",
        "beoogdUitExploitatieDatum",
        "bestemming",
        "bovenliggendeEenheid",
        "brutohuur",
        "clusters",
        "collectieveObjecten",
        "Criteria",
        "doelgroep",
        "energieprestaties",
        "energievoorzieningen",
        "etage",
        "gebruiksoppervlakte",
        "inExploitatieReden",
        "interieur",
        "isolatie",
        "juridischEigendomspercentage",
        "kadastraalNummer",
        "kamersAantal",
        "klimaatbeheersing",
        "kwaliteitsniveau",
        "ligging",
        "maatschappelijkLabel",
        "monumenten",
        "onderhoudslabel",
        "panden",
        "prijscomponenten",
        "rayon",
        "rekenhuur",
        "relaties",
        "ruimten",
        "sanitair",
        "streefhuur",
        "toegankelijkheidslabel",
        "totaalInhoud",
        "totaleOppervlakte",
        "uitExploitatieReden",
        "verkoop",
        "vertrekkenAantal",
        "verwarmdeVertrekkenAantal",
        "vestiging",
        "volgnummer",
        "vraagprijs",
        "Woningwaarderingstelsel",
        "woonvorm",
        "wozEenheden",
        "zelfstandig",
        "zorgfaciliteitOmschrijving",
        "extra-attributen",
        "informatieobjecten",
        "sturingslabels",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EenhedenEenheidbericht from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict["soort"] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detail_soort
        if self.detail_soort:
            _dict["detailSoort"] = self.detail_soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detail_status
        if self.detail_status:
            _dict["detailStatus"] = self.detail_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aanvullende_doelgroep
        if self.aanvullende_doelgroep:
            _dict["aanvullendeDoelgroep"] = self.aanvullende_doelgroep.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adres
        if self.adres:
            _dict["adres"] = self.adres.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adresseerbaar_object_basisregistratie
        if self.adresseerbaar_object_basisregistratie:
            _dict[
                "adresseerbaarObjectBasisregistratie"
            ] = self.adresseerbaar_object_basisregistratie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in beleidswaarde (list)
        _items = []
        if self.beleidswaarde:
            for _item in self.beleidswaarde:
                if _item:
                    _items.append(_item.to_dict())
            _dict["beleidswaarde"] = _items
        # override the default output from pydantic by calling `to_dict()` of bestemming
        if self.bestemming:
            _dict["bestemming"] = self.bestemming.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bovenliggende_eenheid
        if self.bovenliggende_eenheid:
            _dict["bovenliggendeEenheid"] = self.bovenliggende_eenheid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in clusters (list)
        _items = []
        if self.clusters:
            for _item in self.clusters:
                if _item:
                    _items.append(_item.to_dict())
            _dict["clusters"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in collectieve_objecten (list)
        _items = []
        if self.collectieve_objecten:
            for _item in self.collectieve_objecten:
                if _item:
                    _items.append(_item.to_dict())
            _dict["collectieveObjecten"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in criteria (list)
        _items = []
        if self.criteria:
            for _item in self.criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Criteria"] = _items
        # override the default output from pydantic by calling `to_dict()` of doelgroep
        if self.doelgroep:
            _dict["doelgroep"] = self.doelgroep.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in energieprestaties (list)
        _items = []
        if self.energieprestaties:
            for _item in self.energieprestaties:
                if _item:
                    _items.append(_item.to_dict())
            _dict["energieprestaties"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in energievoorzieningen (list)
        _items = []
        if self.energievoorzieningen:
            for _item in self.energievoorzieningen:
                if _item:
                    _items.append(_item.to_dict())
            _dict["energievoorzieningen"] = _items
        # override the default output from pydantic by calling `to_dict()` of in_exploitatie_reden
        if self.in_exploitatie_reden:
            _dict["inExploitatieReden"] = self.in_exploitatie_reden.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in interieur (list)
        _items = []
        if self.interieur:
            for _item in self.interieur:
                if _item:
                    _items.append(_item.to_dict())
            _dict["interieur"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in isolatie (list)
        _items = []
        if self.isolatie:
            for _item in self.isolatie:
                if _item:
                    _items.append(_item.to_dict())
            _dict["isolatie"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in klimaatbeheersing (list)
        _items = []
        if self.klimaatbeheersing:
            for _item in self.klimaatbeheersing:
                if _item:
                    _items.append(_item.to_dict())
            _dict["klimaatbeheersing"] = _items
        # override the default output from pydantic by calling `to_dict()` of kwaliteitsniveau
        if self.kwaliteitsniveau:
            _dict["kwaliteitsniveau"] = self.kwaliteitsniveau.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ligging (list)
        _items = []
        if self.ligging:
            for _item in self.ligging:
                if _item:
                    _items.append(_item.to_dict())
            _dict["ligging"] = _items
        # override the default output from pydantic by calling `to_dict()` of maatschappelijk_label
        if self.maatschappelijk_label:
            _dict["maatschappelijkLabel"] = self.maatschappelijk_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in monumenten (list)
        _items = []
        if self.monumenten:
            for _item in self.monumenten:
                if _item:
                    _items.append(_item.to_dict())
            _dict["monumenten"] = _items
        # override the default output from pydantic by calling `to_dict()` of onderhoudslabel
        if self.onderhoudslabel:
            _dict["onderhoudslabel"] = self.onderhoudslabel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in panden (list)
        _items = []
        if self.panden:
            for _item in self.panden:
                if _item:
                    _items.append(_item.to_dict())
            _dict["panden"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prijscomponenten (list)
        _items = []
        if self.prijscomponenten:
            for _item in self.prijscomponenten:
                if _item:
                    _items.append(_item.to_dict())
            _dict["prijscomponenten"] = _items
        # override the default output from pydantic by calling `to_dict()` of rayon
        if self.rayon:
            _dict["rayon"] = self.rayon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in relaties (list)
        _items = []
        if self.relaties:
            for _item in self.relaties:
                if _item:
                    _items.append(_item.to_dict())
            _dict["relaties"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ruimten (list)
        _items = []
        if self.ruimten:
            for _item in self.ruimten:
                if _item:
                    _items.append(_item.to_dict())
            _dict["ruimten"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sanitair (list)
        _items = []
        if self.sanitair:
            for _item in self.sanitair:
                if _item:
                    _items.append(_item.to_dict())
            _dict["sanitair"] = _items
        # override the default output from pydantic by calling `to_dict()` of toegankelijkheidslabel
        if self.toegankelijkheidslabel:
            _dict["toegankelijkheidslabel"] = self.toegankelijkheidslabel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uit_exploitatie_reden
        if self.uit_exploitatie_reden:
            _dict["uitExploitatieReden"] = self.uit_exploitatie_reden.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vestiging
        if self.vestiging:
            _dict["vestiging"] = self.vestiging.to_dict()
        # override the default output from pydantic by calling `to_dict()` of woningwaarderingstelsel
        if self.woningwaarderingstelsel:
            _dict["Woningwaarderingstelsel"] = self.woningwaarderingstelsel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of woonvorm
        if self.woonvorm:
            _dict["woonvorm"] = self.woonvorm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in woz_eenheden (list)
        _items = []
        if self.woz_eenheden:
            for _item in self.woz_eenheden:
                if _item:
                    _items.append(_item.to_dict())
            _dict["wozEenheden"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extra_attributen (list)
        _items = []
        if self.extra_attributen:
            for _item in self.extra_attributen:
                if _item:
                    _items.append(_item.to_dict())
            _dict["extra-attributen"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in informatieobjecten (list)
        _items = []
        if self.informatieobjecten:
            for _item in self.informatieobjecten:
                if _item:
                    _items.append(_item.to_dict())
            _dict["informatieobjecten"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sturingslabels (list)
        _items = []
        if self.sturingslabels:
            for _item in self.sturingslabels:
                if _item:
                    _items.append(_item.to_dict())
            _dict["sturingslabels"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EenhedenEenheidbericht from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "idExtern": obj.get("idExtern"),
                "idGegevensbeheerder": obj.get("idGegevensbeheerder"),
                "idOrganisatie": obj.get("idOrganisatie"),
                "idAdministratie": obj.get("idAdministratie"),
                "code": obj.get("code"),
                "soort": Referentiedata.from_dict(obj["soort"])
                if obj.get("soort") is not None
                else None,
                "detailSoort": Referentiedata.from_dict(obj["detailSoort"])
                if obj.get("detailSoort") is not None
                else None,
                "naam": obj.get("naam"),
                "omschrijving": obj.get("omschrijving"),
                "bouwnummer": obj.get("bouwnummer"),
                "status": Referentiedata.from_dict(obj["status"])
                if obj.get("status") is not None
                else None,
                "detailStatus": Referentiedata.from_dict(obj["detailStatus"])
                if obj.get("detailStatus") is not None
                else None,
                "beginBouwdatum": obj.get("beginBouwdatum"),
                "bouwjaar": obj.get("bouwjaar"),
                "opleverdatum": obj.get("opleverdatum"),
                "inExploitatiedatum": obj.get("inExploitatiedatum"),
                "uitExploitatiedatum": obj.get("uitExploitatiedatum"),
                "aantalOnzelfstandigeEenheden": obj.get("aantalOnzelfstandigeEenheden"),
                "aanvullendeDoelgroep": Referentiedata.from_dict(
                    obj["aanvullendeDoelgroep"]
                )
                if obj.get("aanvullendeDoelgroep") is not None
                else None,
                "adres": EenhedenAdres.from_dict(obj["adres"])
                if obj.get("adres") is not None
                else None,
                "adresseerbaarObjectBasisregistratie": EenhedenAdresseerbaarObjectBasisregistratie.from_dict(
                    obj["adresseerbaarObjectBasisregistratie"]
                )
                if obj.get("adresseerbaarObjectBasisregistratie") is not None
                else None,
                "beleidswaarde": [
                    EenhedenBeleidswaarde.from_dict(_item)
                    for _item in obj["beleidswaarde"]
                ]
                if obj.get("beleidswaarde") is not None
                else None,
                "beoogdUitExploitatieDatum": obj.get("beoogdUitExploitatieDatum"),
                "bestemming": Referentiedata.from_dict(obj["bestemming"])
                if obj.get("bestemming") is not None
                else None,
                "bovenliggendeEenheid": EenheidSleutels.from_dict(
                    obj["bovenliggendeEenheid"]
                )
                if obj.get("bovenliggendeEenheid") is not None
                else None,
                "brutohuur": obj.get("brutohuur"),
                "clusters": [
                    EenhedenCluster.from_dict(_item) for _item in obj["clusters"]
                ]
                if obj.get("clusters") is not None
                else None,
                "collectieveObjecten": [
                    CollectiefObjectSleutels.from_dict(_item)
                    for _item in obj["collectieveObjecten"]
                ]
                if obj.get("collectieveObjecten") is not None
                else None,
                "Criteria": [
                    EenhedenEenheidcriterium.from_dict(_item)
                    for _item in obj["Criteria"]
                ]
                if obj.get("Criteria") is not None
                else None,
                "doelgroep": Referentiedata.from_dict(obj["doelgroep"])
                if obj.get("doelgroep") is not None
                else None,
                "energieprestaties": [
                    EenhedenEnergieprestatie.from_dict(_item)
                    for _item in obj["energieprestaties"]
                ]
                if obj.get("energieprestaties") is not None
                else None,
                "energievoorzieningen": [
                    Referentiedata.from_dict(_item)
                    for _item in obj["energievoorzieningen"]
                ]
                if obj.get("energievoorzieningen") is not None
                else None,
                "etage": obj.get("etage"),
                "gebruiksoppervlakte": obj.get("gebruiksoppervlakte"),
                "inExploitatieReden": Referentiedata.from_dict(
                    obj["inExploitatieReden"]
                )
                if obj.get("inExploitatieReden") is not None
                else None,
                "interieur": [
                    Referentiedata.from_dict(_item) for _item in obj["interieur"]
                ]
                if obj.get("interieur") is not None
                else None,
                "isolatie": [
                    Referentiedata.from_dict(_item) for _item in obj["isolatie"]
                ]
                if obj.get("isolatie") is not None
                else None,
                "juridischEigendomspercentage": obj.get("juridischEigendomspercentage"),
                "kadastraalNummer": obj.get("kadastraalNummer"),
                "kamersAantal": obj.get("kamersAantal"),
                "klimaatbeheersing": [
                    Referentiedata.from_dict(_item)
                    for _item in obj["klimaatbeheersing"]
                ]
                if obj.get("klimaatbeheersing") is not None
                else None,
                "kwaliteitsniveau": Referentiedata.from_dict(obj["kwaliteitsniveau"])
                if obj.get("kwaliteitsniveau") is not None
                else None,
                "ligging": [Referentiedata.from_dict(_item) for _item in obj["ligging"]]
                if obj.get("ligging") is not None
                else None,
                "maatschappelijkLabel": Referentiedata.from_dict(
                    obj["maatschappelijkLabel"]
                )
                if obj.get("maatschappelijkLabel") is not None
                else None,
                "monumenten": [
                    Referentiedata.from_dict(_item) for _item in obj["monumenten"]
                ]
                if obj.get("monumenten") is not None
                else None,
                "onderhoudslabel": Referentiedata.from_dict(obj["onderhoudslabel"])
                if obj.get("onderhoudslabel") is not None
                else None,
                "panden": [EenhedenPand.from_dict(_item) for _item in obj["panden"]]
                if obj.get("panden") is not None
                else None,
                "prijscomponenten": [
                    EenhedenPrijscomponent.from_dict(_item)
                    for _item in obj["prijscomponenten"]
                ]
                if obj.get("prijscomponenten") is not None
                else None,
                "rayon": Referentiedata.from_dict(obj["rayon"])
                if obj.get("rayon") is not None
                else None,
                "rekenhuur": obj.get("rekenhuur"),
                "relaties": [
                    EenhedenRelatie.from_dict(_item) for _item in obj["relaties"]
                ]
                if obj.get("relaties") is not None
                else None,
                "ruimten": [EenhedenRuimte.from_dict(_item) for _item in obj["ruimten"]]
                if obj.get("ruimten") is not None
                else None,
                "sanitair": [
                    Referentiedata.from_dict(_item) for _item in obj["sanitair"]
                ]
                if obj.get("sanitair") is not None
                else None,
                "streefhuur": obj.get("streefhuur"),
                "toegankelijkheidslabel": Referentiedata.from_dict(
                    obj["toegankelijkheidslabel"]
                )
                if obj.get("toegankelijkheidslabel") is not None
                else None,
                "totaalInhoud": obj.get("totaalInhoud"),
                "totaleOppervlakte": obj.get("totaleOppervlakte"),
                "uitExploitatieReden": Referentiedata.from_dict(
                    obj["uitExploitatieReden"]
                )
                if obj.get("uitExploitatieReden") is not None
                else None,
                "verkoop": obj.get("verkoop"),
                "vertrekkenAantal": obj.get("vertrekkenAantal"),
                "verwarmdeVertrekkenAantal": obj.get("verwarmdeVertrekkenAantal"),
                "vestiging": Referentiedata.from_dict(obj["vestiging"])
                if obj.get("vestiging") is not None
                else None,
                "volgnummer": obj.get("volgnummer"),
                "vraagprijs": obj.get("vraagprijs"),
                "Woningwaarderingstelsel": Referentiedata.from_dict(
                    obj["Woningwaarderingstelsel"]
                )
                if obj.get("Woningwaarderingstelsel") is not None
                else None,
                "woonvorm": Referentiedata.from_dict(obj["woonvorm"])
                if obj.get("woonvorm") is not None
                else None,
                "wozEenheden": [
                    EenhedenWozEenheid.from_dict(_item) for _item in obj["wozEenheden"]
                ]
                if obj.get("wozEenheden") is not None
                else None,
                "zelfstandig": obj.get("zelfstandig"),
                "zorgfaciliteitOmschrijving": obj.get("zorgfaciliteitOmschrijving"),
                "extra-attributen": [
                    ExtraAttribuut.from_dict(_item) for _item in obj["extra-attributen"]
                ]
                if obj.get("extra-attributen") is not None
                else None,
                "informatieobjecten": [
                    Informatieobject.from_dict(_item)
                    for _item in obj["informatieobjecten"]
                ]
                if obj.get("informatieobjecten") is not None
                else None,
                "sturingslabels": [
                    Sturingslabel.from_dict(_item) for _item in obj["sturingslabels"]
                ]
                if obj.get("sturingslabels") is not None
                else None,
            }
        )
        return _obj
