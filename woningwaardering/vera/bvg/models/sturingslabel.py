# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata

class Sturingslabel(BaseModel):
    """
    Sturingslabel
    """
    soort: Optional[Referentiedata] = Field(None, description="De categorie of groepering van het label. Bijv. dVI samenstelling bezit etc. Referentiedatasoort STURINGSLABELSOORT.")
    label: Optional[Referentiedata] = Field(None, description="Het label dat is bepaald op basis van de bijbehorende definitie. Bijv. Zelfstandige huurwoning. Referentiedatasoort STURINGSLABEL.")
    datum: Optional[date] = Field(None, description="Datum en tijdstip waarop het label is bepaald.")
    bron: Optional[Referentiedata] = Field(None, description="De bron van de definitie van het label. Bijv. dVI 2014, CORA etc. Referentiedatasoort STURINGSLABELBRON.")
    __properties = ["soort", "label", "datum", "bron"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Sturingslabel:
        """Create an instance of Sturingslabel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict['soort'] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label
        if self.label:
            _dict['label'] = self.label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bron
        if self.bron:
            _dict['bron'] = self.bron.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Sturingslabel:
        """Create an instance of Sturingslabel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Sturingslabel.parse_obj(obj)

        _obj = Sturingslabel.parse_obj({
            "soort": Referentiedata.from_dict(obj.get("soort")) if obj.get("soort") is not None else None,
            "label": Referentiedata.from_dict(obj.get("label")) if obj.get("label") is not None else None,
            "datum": obj.get("datum"),
            "bron": Referentiedata.from_dict(obj.get("bron")) if obj.get("bron") is not None else None
        })
        return _obj


