# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from woningwaardering.vera.bvg.models.extra_attribuut import ExtraAttribuut
from woningwaardering.vera.bvg.models.informatieobject import Informatieobject
from woningwaardering.vera.bvg.models.sturingslabel import Sturingslabel

class BerichtBasis(BaseModel):
    """
    BerichtBasis
    """
    extra_attributen: Optional[conlist(ExtraAttribuut)] = Field(None, alias="extra-attributen", description="Mogelijkheid om het bericht uit te breiden met attributen die nog niet in het logisch datamodel beschikbaar zijn")
    informatieobjecten: Optional[conlist(Informatieobject)] = Field(None, description="Mogelijkheid om het bericht uit te breiden met documentatie. De beschrijving kan de inhoud van een notitie of memo zijn")
    sturingslabels: Optional[conlist(Sturingslabel)] = Field(None, description="Mogelijkheid om het bericht uit te breiden met sturingslabels")
    __properties = ["extra-attributen", "informatieobjecten", "sturingslabels"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BerichtBasis:
        """Create an instance of BerichtBasis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in extra_attributen (list)
        _items = []
        if self.extra_attributen:
            for _item in self.extra_attributen:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extra-attributen'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in informatieobjecten (list)
        _items = []
        if self.informatieobjecten:
            for _item in self.informatieobjecten:
                if _item:
                    _items.append(_item.to_dict())
            _dict['informatieobjecten'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sturingslabels (list)
        _items = []
        if self.sturingslabels:
            for _item in self.sturingslabels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sturingslabels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BerichtBasis:
        """Create an instance of BerichtBasis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BerichtBasis.parse_obj(obj)

        _obj = BerichtBasis.parse_obj({
            "extra_attributen": [ExtraAttribuut.from_dict(_item) for _item in obj.get("extra-attributen")] if obj.get("extra-attributen") is not None else None,
            "informatieobjecten": [Informatieobject.from_dict(_item) for _item in obj.get("informatieobjecten")] if obj.get("informatieobjecten") is not None else None,
            "sturingslabels": [Sturingslabel.from_dict(_item) for _item in obj.get("sturingslabels")] if obj.get("sturingslabels") is not None else None
        })
        return _obj


