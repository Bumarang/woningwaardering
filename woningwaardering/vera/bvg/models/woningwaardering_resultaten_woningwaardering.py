# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata
from woningwaardering.vera.bvg.models.woningwaardering_resultaten_woningwaardering_criterium import WoningwaarderingResultatenWoningwaarderingCriterium

class WoningwaarderingResultatenWoningwaardering(BaseModel):
    """
    WoningwaarderingResultatenWoningwaardering
    """
    id: Optional[StrictStr] = Field(None, description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.")
    id_extern: Optional[StrictStr] = Field(None, alias="idExtern", description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.")
    id_gegevensbeheerder: Optional[StrictStr] = Field(None, alias="idGegevensbeheerder", description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.")
    id_organisatie: Optional[StrictStr] = Field(None, alias="idOrganisatie", description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.")
    id_administratie: Optional[StrictStr] = Field(None, alias="idAdministratie", description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.")
    code: Optional[StrictStr] = Field(None, description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)")
    soort: Optional[Referentiedata] = Field(None, description="Het soort onderdeel van de woningwaardering. Bijv. Energielabel, Oppervlakte etc. Referentiedatasoort WONINGWAARDERINGSOORT.")
    begindatum: Optional[date] = Field(None, description="De datum waarop het woning waardering  onderdeel in gaat of is ingegaan.")
    einddatum: Optional[date] = Field(None, description="De datum waarop het woningwaardering onderdeel niet meer van toepassing is.")
    aantal: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Het aantal van de opgegeven meeteenheid van de bijbehorende woningwaardering criterium.")
    criterium: Optional[WoningwaarderingResultatenWoningwaarderingCriterium] = Field(None, description="De omschrijving van het woningwaardering onderdeel.")
    punten: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Het aantal punten dat is toegekend op basis van het opgegeven aantal, voor de betreffende woningwaardering. Voor bepaalde woningwaarderingGroepen binnen een woningwaarderingstelsel geldt dat het aantal punten op groepsniveau bepaald wordt. In die gevallen kan het attribuut aantal punten in deze klasse leeg blijven")
    waarde: Optional[StrictStr] = Field(None, description="Bevat een niet numerieke waarde van de woningwaardering.")
    __properties = ["id", "idExtern", "idGegevensbeheerder", "idOrganisatie", "idAdministratie", "code", "soort", "begindatum", "einddatum", "aantal", "criterium", "punten", "waarde"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WoningwaarderingResultatenWoningwaardering:
        """Create an instance of WoningwaarderingResultatenWoningwaardering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict['soort'] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of criterium
        if self.criterium:
            _dict['criterium'] = self.criterium.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WoningwaarderingResultatenWoningwaardering:
        """Create an instance of WoningwaarderingResultatenWoningwaardering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WoningwaarderingResultatenWoningwaardering.parse_obj(obj)

        _obj = WoningwaarderingResultatenWoningwaardering.parse_obj({
            "id": obj.get("id"),
            "id_extern": obj.get("idExtern"),
            "id_gegevensbeheerder": obj.get("idGegevensbeheerder"),
            "id_organisatie": obj.get("idOrganisatie"),
            "id_administratie": obj.get("idAdministratie"),
            "code": obj.get("code"),
            "soort": Referentiedata.from_dict(obj.get("soort")) if obj.get("soort") is not None else None,
            "begindatum": obj.get("begindatum"),
            "einddatum": obj.get("einddatum"),
            "aantal": obj.get("aantal"),
            "criterium": WoningwaarderingResultatenWoningwaarderingCriterium.from_dict(obj.get("criterium")) if obj.get("criterium") is not None else None,
            "punten": obj.get("punten"),
            "waarde": obj.get("waarde")
        })
        return _obj


