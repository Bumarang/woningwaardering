# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class EenhedenBagPand(BaseModel):
    """
    EenhedenBagPand
    """
    id: Optional[StrictStr] = Field(None, description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.")
    id_extern: Optional[StrictStr] = Field(None, alias="idExtern", description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.")
    id_gegevensbeheerder: Optional[StrictStr] = Field(None, alias="idGegevensbeheerder", description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.")
    id_organisatie: Optional[StrictStr] = Field(None, alias="idOrganisatie", description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.")
    id_administratie: Optional[StrictStr] = Field(None, alias="idAdministratie", description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.")
    code: Optional[StrictStr] = Field(None, description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)")
    bag_identificatie: Optional[StrictStr] = Field(None, alias="bagIdentificatie", description="Het BAG registratienummer van het pand zoals bekend is bij de BAG.")
    bag_status: Optional[StrictStr] = Field(None, alias="bagStatus", description="De fase van de levenscyclus van een pand, waarin het betreffende pand zich bevindt. Dit attribuut is afkomstig uit de BAG.")
    bag_in_onderzoek: Optional[StrictBool] = Field(None, alias="bagInOnderzoek", description="De aanduiding waarmee wordt aangegeven dat een onderzoek wordt uitgevoerd naar de juistheid van een of meerdere gegevens van het betreffende object.")
    bag_officieel: Optional[StrictBool] = Field(None, alias="bagOfficieel", description="De aanduiding waarmee kan worden aangegeven dat een object in de basisregistratie is opgenomen als gevolg van een feitelijke constatering, zonder dat er op het moment van opname sprake is van een formele grondslag voor deze opname.")
    bag_bouwdatum: Optional[date] = Field(None, alias="bagBouwdatum", description="De aanduiding van het jaar waarin een pand oorspronkelijk als bouwkundig gereed is opgeleverd.")
    __properties = ["id", "idExtern", "idGegevensbeheerder", "idOrganisatie", "idAdministratie", "code", "bagIdentificatie", "bagStatus", "bagInOnderzoek", "bagOfficieel", "bagBouwdatum"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EenhedenBagPand:
        """Create an instance of EenhedenBagPand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EenhedenBagPand:
        """Create an instance of EenhedenBagPand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EenhedenBagPand.parse_obj(obj)

        _obj = EenhedenBagPand.parse_obj({
            "id": obj.get("id"),
            "id_extern": obj.get("idExtern"),
            "id_gegevensbeheerder": obj.get("idGegevensbeheerder"),
            "id_organisatie": obj.get("idOrganisatie"),
            "id_administratie": obj.get("idAdministratie"),
            "code": obj.get("code"),
            "bag_identificatie": obj.get("bagIdentificatie"),
            "bag_status": obj.get("bagStatus"),
            "bag_in_onderzoek": obj.get("bagInOnderzoek"),
            "bag_officieel": obj.get("bagOfficieel"),
            "bag_bouwdatum": obj.get("bagBouwdatum")
        })
        return _obj


