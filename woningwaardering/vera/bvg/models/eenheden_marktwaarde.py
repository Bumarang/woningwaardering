# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class EenhedenMarktwaarde(BaseModel):
    """
    EenhedenMarktwaarde
    """
    id: Optional[StrictStr] = Field(None, description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.")
    id_extern: Optional[StrictStr] = Field(None, alias="idExtern", description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.")
    id_gegevensbeheerder: Optional[StrictStr] = Field(None, alias="idGegevensbeheerder", description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.")
    id_organisatie: Optional[StrictStr] = Field(None, alias="idOrganisatie", description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.")
    id_administratie: Optional[StrictStr] = Field(None, alias="idAdministratie", description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.")
    code: Optional[StrictStr] = Field(None, description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)")
    beheers_kosten: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="beheersKosten", description="Beheerkosten op het moment van waarderen zoals toegepast in de martkwaardeberekening.")
    contract_jaarhuur: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="contractJaarhuur", description="De contractueel afgesproken jaarhuur op het moment van waarderen.")
    disconteringsvoet: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Disconteringsvoet op het moment van waarderen.")
    doorexploiteren_disconteringsvoet: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="doorexploiterenDisconteringsvoet", description="Disconteringsvoet doorexploiteren op het moment van waarderen.")
    leegwaarde: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="De geschatte verkoopprijs op basis van de kosten koper, vrij van huur en overige lasten (Handboek MVS).")
    markt_jaarhuur: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="marktJaarhuur", description="Actuele markt jaarhuur op het moment van waarderen.")
    onderhouds_kosten: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="onderhoudsKosten", description="Onderhoudskosten op het moment van waarderen zoals toegepast in de martkwaardeberekening.")
    verhuurderheffing: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="De verhuurderheffing voor de volledige DCF-periode. De heffing wordt berekend als een percentage van de WOZ-waarde (Handboek MVS).")
    verslag_jaar: Optional[StrictInt] = Field(None, alias="verslagJaar", description="Het verslagjaar waarop de marktwaarde bepaling betrekking heeft.")
    waarde: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="De vastgestelde taxatiewaarde, ook wel marktwaarde in verhuurde staat.")
    __properties = ["id", "idExtern", "idGegevensbeheerder", "idOrganisatie", "idAdministratie", "code", "beheersKosten", "contractJaarhuur", "disconteringsvoet", "doorexploiterenDisconteringsvoet", "leegwaarde", "marktJaarhuur", "onderhoudsKosten", "verhuurderheffing", "verslagJaar", "waarde"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EenhedenMarktwaarde:
        """Create an instance of EenhedenMarktwaarde from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EenhedenMarktwaarde:
        """Create an instance of EenhedenMarktwaarde from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EenhedenMarktwaarde.parse_obj(obj)

        _obj = EenhedenMarktwaarde.parse_obj({
            "id": obj.get("id"),
            "id_extern": obj.get("idExtern"),
            "id_gegevensbeheerder": obj.get("idGegevensbeheerder"),
            "id_organisatie": obj.get("idOrganisatie"),
            "id_administratie": obj.get("idAdministratie"),
            "code": obj.get("code"),
            "beheers_kosten": obj.get("beheersKosten"),
            "contract_jaarhuur": obj.get("contractJaarhuur"),
            "disconteringsvoet": obj.get("disconteringsvoet"),
            "doorexploiteren_disconteringsvoet": obj.get("doorexploiterenDisconteringsvoet"),
            "leegwaarde": obj.get("leegwaarde"),
            "markt_jaarhuur": obj.get("marktJaarhuur"),
            "onderhouds_kosten": obj.get("onderhoudsKosten"),
            "verhuurderheffing": obj.get("verhuurderheffing"),
            "verslag_jaar": obj.get("verslagJaar"),
            "waarde": obj.get("waarde")
        })
        return _obj


