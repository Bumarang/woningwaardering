# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata

class EenhedenPrijscomponent(BaseModel):
    """
    EenhedenPrijscomponent
    """
    id: Optional[StrictStr] = Field(None, description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.")
    id_extern: Optional[StrictStr] = Field(None, alias="idExtern", description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.")
    id_gegevensbeheerder: Optional[StrictStr] = Field(None, alias="idGegevensbeheerder", description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.")
    id_organisatie: Optional[StrictStr] = Field(None, alias="idOrganisatie", description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.")
    id_administratie: Optional[StrictStr] = Field(None, alias="idAdministratie", description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.")
    code: Optional[StrictStr] = Field(None, description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)")
    soort: Optional[Referentiedata] = Field(None, description="Geeft aan om welk soort prijscomponent het betreft. Bijvoorbeeld een component voor een eenheid, of een component voor een overeenkomst. Referentiedatasoort PRIJSCOMPONENTSOORT.")
    detail_soort: Optional[Referentiedata] = Field(None, alias="detailSoort", description="Geeft aan om welk detail soort prijscomponent het betreft. Bijvoorbeeld of het om service kosten gaat. Referentiedatasoort PRIJSCOMPONENTDETAILSOORT.")
    begindatum: Optional[datetime] = Field(None, description="De begindatum van het prijscomponent. Dit is de datum waarop het prijscomponent van toepassing is.")
    einddatum: Optional[datetime] = Field(None, description="De datum die aangeeft dat het prijscomponent niet meer van toepassing is. Er is dan een nieuwer prijscomponent van toepassing.")
    bedrag: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Het bedrag in euro's van het prijscomponent exclusief BTW.")
    bedrag_inclusief_btw: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="bedragInclusiefBtw", description="Het bedrag in euro's van het prijscomponent inclusief BTW.")
    btw: Optional[Referentiedata] = Field(None, description="De BTW van het prijscomponent. Referentiedatasoort BTW.")
    wijzigingsreden: Optional[Referentiedata] = Field(None, description="Geeft aan wat de reden was voor het aanpassen van het prijscomponent. Referentiedatasoort PRIJSCOMPONENTWIJZIGINGSREDEN.")
    __properties = ["id", "idExtern", "idGegevensbeheerder", "idOrganisatie", "idAdministratie", "code", "soort", "detailSoort", "begindatum", "einddatum", "bedrag", "bedragInclusiefBtw", "btw", "wijzigingsreden"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EenhedenPrijscomponent:
        """Create an instance of EenhedenPrijscomponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of soort
        if self.soort:
            _dict['soort'] = self.soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detail_soort
        if self.detail_soort:
            _dict['detailSoort'] = self.detail_soort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of btw
        if self.btw:
            _dict['btw'] = self.btw.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wijzigingsreden
        if self.wijzigingsreden:
            _dict['wijzigingsreden'] = self.wijzigingsreden.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EenhedenPrijscomponent:
        """Create an instance of EenhedenPrijscomponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EenhedenPrijscomponent.parse_obj(obj)

        _obj = EenhedenPrijscomponent.parse_obj({
            "id": obj.get("id"),
            "id_extern": obj.get("idExtern"),
            "id_gegevensbeheerder": obj.get("idGegevensbeheerder"),
            "id_organisatie": obj.get("idOrganisatie"),
            "id_administratie": obj.get("idAdministratie"),
            "code": obj.get("code"),
            "soort": Referentiedata.from_dict(obj.get("soort")) if obj.get("soort") is not None else None,
            "detail_soort": Referentiedata.from_dict(obj.get("detailSoort")) if obj.get("detailSoort") is not None else None,
            "begindatum": obj.get("begindatum"),
            "einddatum": obj.get("einddatum"),
            "bedrag": obj.get("bedrag"),
            "bedrag_inclusief_btw": obj.get("bedragInclusiefBtw"),
            "btw": Referentiedata.from_dict(obj.get("btw")) if obj.get("btw") is not None else None,
            "wijzigingsreden": Referentiedata.from_dict(obj.get("wijzigingsreden")) if obj.get("wijzigingsreden") is not None else None
        })
        return _obj


