# coding: utf-8

"""
    VERA-Beheer Vastgoedgegevens

    API-specificatie van ketenproces 'Beheer Vastgoedgegevens'. Deze specificatie is gebaseerd op VERA versie 4.1.4+240311.2

    The version of the OpenAPI document: 1.1.4+240311.2
    Contact: VERA@aedesdatastandaarden.nl
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from woningwaardering.vera.bvg.models.adres_sleutels import AdresSleutels
from woningwaardering.vera.bvg.models.eenheden_bag_pand import EenhedenBagPand
from woningwaardering.vera.bvg.models.geometrie_sleutels import GeometrieSleutels
from woningwaardering.vera.bvg.models.referentiedata import Referentiedata
from typing import Set
from typing_extensions import Self


class EenhedenAdresseerbaarObjectBasisregistratie(BaseModel):
    """
    EenhedenAdresseerbaarObjectBasisregistratie
    """  # noqa: E501

    id: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het bronsysteem. Je verstuurt een entiteit altijd met het eigen id. Id kan leeg zijn.",
    )
    id_extern: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven in het doelsysteem. Deze idExtern wisselt om met id afhankelijk van de richting van de gegevensuitwisseling.",
        alias="idExtern",
    )
    id_gegevensbeheerder: Optional[StrictStr] = Field(
        default=None,
        description="De primaire sleutel van het gegeven van de gegevensbeheerder. Bijv. de overheid of andere standaarden.",
        alias="idGegevensbeheerder",
    )
    id_organisatie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de organisatie die verantwoordelijk is voor het gegeven. Horende bij de idExtern.",
        alias="idOrganisatie",
    )
    id_administratie: Optional[StrictStr] = Field(
        default=None,
        description="Dit verwijst naar de administratie waar het gegeven onderdeel van is. Horende bij de idExtern.",
        alias="idAdministratie",
    )
    code: Optional[StrictStr] = Field(
        default=None,
        description="De unieke code (Bijvoorbeeld om te tonen of te zoeken)",
    )
    bag_gebruikers_oppervlakte: Optional[StrictInt] = Field(
        default=None,
        description="De gebruikersoppervlakte zoals in de BAG beschreven.",
        alias="bagGebruikersOppervlakte",
    )
    bag_gebruiksdoelen: Optional[List[Referentiedata]] = Field(
        default=None,
        description="De categorisering van de gebruiksdoelen van het betreffende verblijfsobject, zoals dit formeel door de overheid als zodanig is toegestaan. Referentiedatasoort GEBRUIKERSDOEL.",
        alias="bagGebruiksdoelen",
    )
    bag_hoofdadres: Optional[AdresSleutels] = Field(
        default=None,
        description="Het hoofdadres van het adresseerbaar object uit de basisregistratie.",
        alias="bagHoofdadres",
    )
    bag_identificatie: Optional[StrictStr] = Field(
        default=None,
        description="De unieke aanduiding van een adresseerbaar object. (standplaats, ligplaats, of verblijfsobject)",
        alias="bagIdentificatie",
    )
    bag_in_onderzoek: Optional[StrictBool] = Field(
        default=None,
        description="De aanduiding waarmee wordt aangegeven dat een onderzoek wordt uitgevoerd naar de juistheid van een of meerdere gegevens van het betreffende object.",
        alias="bagInOnderzoek",
    )
    bag_nevenadressen: Optional[List[AdresSleutels]] = Field(
        default=None,
        description="De adressen die gerelateerd zijn aan het adresseerbaar object uit de basisregistratie. Het hoofdadres maakt geen deel uit van deze collectie.",
        alias="bagNevenadressen",
    )
    bag_officieel: Optional[StrictBool] = Field(
        default=None,
        description="De aanduiding waarmee kan worden aangegeven dat een object in de basisregistratie is opgenomen als gevolg van een feitelijke constatering, zonder dat er op het moment van opname sprake is van een formele grondslag voor deze opname.",
        alias="bagOfficieel",
    )
    bag_oppervlakte_verblijfsobject: Optional[StrictInt] = Field(
        default=None,
        description="De gebruiksoppervlakte van een verblijfsobject in gehele vierkante meters.",
        alias="bagOppervlakteVerblijfsobject",
    )
    bag_panden_basisregistratie: Optional[List[EenhedenBagPand]] = Field(
        default=None,
        description="De panden die gerelateerd zijn aan het adresseerbaar object uit de basisregistratie.",
        alias="bagPandenBasisregistratie",
    )
    bag_status: Optional[StrictStr] = Field(
        default=None,
        description="De fase van de levenscyclus van een standplaats, ligplaats of verblijfsobject waarin het betreffende object zich bevindt.",
        alias="bagStatus",
    )
    geometrie: Optional[GeometrieSleutels] = Field(
        default=None,
        description="De geometrie van het adresseerbaar object uit de basisregistratie.",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "idExtern",
        "idGegevensbeheerder",
        "idOrganisatie",
        "idAdministratie",
        "code",
        "bagGebruikersOppervlakte",
        "bagGebruiksdoelen",
        "bagHoofdadres",
        "bagIdentificatie",
        "bagInOnderzoek",
        "bagNevenadressen",
        "bagOfficieel",
        "bagOppervlakteVerblijfsobject",
        "bagPandenBasisregistratie",
        "bagStatus",
        "geometrie",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EenhedenAdresseerbaarObjectBasisregistratie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bag_gebruiksdoelen (list)
        _bag_gebruiksdoelen_items = []
        if self.bag_gebruiksdoelen:
            for _bag_gebruiksdoelen_item in self.bag_gebruiksdoelen:
                if _bag_gebruiksdoelen_item:
                    _bag_gebruiksdoelen_items.append(_bag_gebruiksdoelen_item.to_dict())
            _dict["bagGebruiksdoelen"] = _bag_gebruiksdoelen_items
        # override the default output from pydantic by calling `to_dict()` of bag_hoofdadres
        if self.bag_hoofdadres:
            _dict["bagHoofdadres"] = self.bag_hoofdadres.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bag_nevenadressen (list)
        _bag_nevenadressen_items = []
        if self.bag_nevenadressen:
            for _bag_nevenadressen_item in self.bag_nevenadressen:
                if _bag_nevenadressen_item:
                    _bag_nevenadressen_items.append(_bag_nevenadressen_item.to_dict())
            _dict["bagNevenadressen"] = _bag_nevenadressen_items
        # override the default output from pydantic by calling `to_dict()` of each item in bag_panden_basisregistratie (list)
        _bag_panden_basisregistratie_items = []
        if self.bag_panden_basisregistratie:
            for _bag_panden_basisregistratie_item in self.bag_panden_basisregistratie:
                if _bag_panden_basisregistratie_item:
                    _bag_panden_basisregistratie_items.append(
                        _bag_panden_basisregistratie_item.to_dict()
                    )
            _dict["bagPandenBasisregistratie"] = _bag_panden_basisregistratie_items
        # override the default output from pydantic by calling `to_dict()` of geometrie
        if self.geometrie:
            _dict["geometrie"] = self.geometrie.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EenhedenAdresseerbaarObjectBasisregistratie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "idExtern": obj.get("idExtern"),
                "idGegevensbeheerder": obj.get("idGegevensbeheerder"),
                "idOrganisatie": obj.get("idOrganisatie"),
                "idAdministratie": obj.get("idAdministratie"),
                "code": obj.get("code"),
                "bagGebruikersOppervlakte": obj.get("bagGebruikersOppervlakte"),
                "bagGebruiksdoelen": [
                    Referentiedata.from_dict(_item)
                    for _item in obj["bagGebruiksdoelen"]
                ]
                if obj.get("bagGebruiksdoelen") is not None
                else None,
                "bagHoofdadres": AdresSleutels.from_dict(obj["bagHoofdadres"])
                if obj.get("bagHoofdadres") is not None
                else None,
                "bagIdentificatie": obj.get("bagIdentificatie"),
                "bagInOnderzoek": obj.get("bagInOnderzoek"),
                "bagNevenadressen": [
                    AdresSleutels.from_dict(_item) for _item in obj["bagNevenadressen"]
                ]
                if obj.get("bagNevenadressen") is not None
                else None,
                "bagOfficieel": obj.get("bagOfficieel"),
                "bagOppervlakteVerblijfsobject": obj.get(
                    "bagOppervlakteVerblijfsobject"
                ),
                "bagPandenBasisregistratie": [
                    EenhedenBagPand.from_dict(_item)
                    for _item in obj["bagPandenBasisregistratie"]
                ]
                if obj.get("bagPandenBasisregistratie") is not None
                else None,
                "bagStatus": obj.get("bagStatus"),
                "geometrie": GeometrieSleutels.from_dict(obj["geometrie"])
                if obj.get("geometrie") is not None
                else None,
            }
        )
        return _obj
